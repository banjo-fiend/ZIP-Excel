import urllib2

from bs4 import BeautifulSoup

import nltk

from heapq import nlargest

from string import punctuation

from collections import defaultdict

from nltk.corpus import stopwords

from nltk.tokenize import sent_tokenize, word_tokenize

fs = FrequencySummarizer()
summary = fs.summarize()

def getWashPostText(url):
    
    try:
        
        page = urllib2.urlopen(url).read().decode('utf8')
        #download the webpage
        
    except:
        return(None,None)
    
    soup = BeautifulSoup(page) #use BeautifulSoup to parse the webpage
    if soup is None:
        return(None,None)
    
    
    text = ""
    if soup.find_all(url) is not None:
        text = ''.join(map(lambda p: p.text, soup.find_all(url)))
        soup2 = BeautifulSoup(text)
        if soup2.find_all('p') is not None:
            text = ''.join(map(lambda p: p.text, soup2.find_all('p')))
    #remove the html and get a string with text of the article  
    
    return text, soup.title.text
class FrequencySummarizer:
    def __init__(self,min_cut=0.1,max_cut=0.9):
        
        self._min_cut = min_cut
        self._max_cut = max_cut
        self.stopwords = set(stopwords.words('english') +
                             list(punctuation) +
                             [u"'s",""])   
        
        
        
    def _compute_frequencies(self,word_sent,customStopWords=None):
        freq = defaultdict(int)
        if customStopWords is None:
            stopwords = set(self._stopwords)
            
        else:
            stopwords = set(customStopWords).union(self._stopwords)
            
        for sentence in word_sent:
            for word in sentence:
                if word not in stopwords:
                    freq[word] += 1
                    
        m = float(max(freq.values()))
        for word in freq.keys():
            freq[word] = freq[word]/m
            if freq[word] >= self._max_cut or freq[word] <= self._min_cut:
                del freq[w]
                
                
        return freq

def summarize(self, article, n):
    
    text=article[0]
    title=article[1]
    
    sentences = sent_tokenize(text)
    
    assert n <= len(sentences)
    
    word_sent = [word_tokenize(s.lower()) for s in sentences]
    
    
    self._freq = self._compute_frequencies(word_sent)
    ranking = defaultdict(int)
    
    for i,sentence in enumerate(word_sent):
        for word in sentence:
            if word in self._freq:
                ranking[i] += self.freq[word]
                
                
    sentences_index = nlargest(n,ranking,key=ranking.get)
    return [sents[j] for j in sentences_index]

nltk.download('stopwords')

nltk.download('punkt')

someUrl = "https://www.washingtonpost.com/news/business/wp/2017/08/02/dow-jones-crosses-over-22000-for-first-time/"

textOfUrl = getWashPostText(someUrl)

print textOfUrl

